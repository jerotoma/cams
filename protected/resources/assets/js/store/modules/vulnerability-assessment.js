// initial state
const state = {
    vulnerabilityAssessment: {

    },
    vulnerabilityAssessments: [],
  }

  // getters
  const getters = {
      vulnerabilityAssessments: state => state.vulnerabilityAssessments,
      vulnerabilityAssessment: state => state.vulnerabilityAssessment,
      vulnerabilityAssessmentsCount: state => state.vulnerabilityAssessmentsCount,
  }

  // actions
  const actions = {
    getVulnerabilityAssessments ({ commit }, data) {
        commit('setLoading', true);
        axios({
            method: 'GET',
            url: '/rest/secured/assessments/vulnerabilities?page='+ data.currentPage + '&perPage=' + data.perPage + '&sortType='+ data.sortType + '&sortField=' + data.sortField,
        })
        .then((response) => {
            const data = response.data;
            commit('setLoading', false);
            commit('setVulnerabilityAssessments', data.vulnerabilityAssessments.data);
            commit('setPagination', data.pagination);
            commit('setAuthRole', data.authRole);
            commit('setAuthPermission', data.authPermission);
        }).catch((error) => {
            commit('setLoading', false);
            console.log(error);
        });
    },
    postVulnerabilityAssessment({ commit }, vulnerabilityAssessment) {
        return new Promise((resolve, reject) => {
                axios({
                method: 'POST',
                url: '/rest/secured/assessments/vulnerabilities',
                data: vulnerabilityAssessment
            }).then((response) => {
                const data = response.data;
                resolve(data);
            }).catch((error) => {
                const resp = error.response;
                reject(resp);
            });
        });
    },
    updateVulnerabilityAssessment({ commit }, vulnerabilityAssessment) {
        return new Promise((resolve, reject) => {
                axios({
                method: 'PUT',
                url: '/rest/secured/assessments/vulnerabilities',
                data: vulnerabilityAssessment
            }).then((response) => {
                const data = response.data;
                resolve(data);
            }).catch((error) => {
                const resp = error.response;
                reject(resp);
            });
        });
    },
    deleteVulnerabilityAssessment({ commit }, vulnerabilityAssessment) {
        return new Promise((resolve, reject) => {
            axios({
                method: 'DELETE',
                url: '/rest/secured/assessments/vulnerabilities/' + vulnerabilityAssessment.id,
                data: {}
            }).then((response) => {
                const data = response.data;
                resolve(data);
            }).catch((error) => {
                const resp = error.response;
                reject(resp);
            });
        });
    },
    searchVulnerabilityAssessmentWithPagination({ commit, dispatch }, data) {
        if (data.searchTerm) {
            axios({
                method: 'GET',
                url: '/rest/secured/assessments/vulnerabilities/search-paginated?searchTerm=' + data.searchTerm + '&page='+ data.currentPage + '&perPage=' + data.perPage + '&sortType='+ data.sortType + '&sortField=' + data.sortField,
            }).then((response) => {
                const data = response.data;
                commit('setVulnerabilityAssessments', data.vulnerabilityAssessments.data);
                commit('setPagination', data.pagination);
                commit('setAuthRole', data.authRole);
                commit('setAuthPermission', data.authPermission);
            }).catch((error) => {
                const resp = error.response;

            });
        } else {
            dispatch('getVulnerabilityAssessments', data);
        }
    },
    searchVulnerabilityAssessment({ commit }, data) {
        return new Promise((resolve, reject) => {
            axios({
                method: 'GET',
                url: '/rest/secured/assessments/vulnerabilities/search?searchTerm=' + data.searchTerm,
            }).then((response) => {
                const data = response.data;
                resolve(data);
            }).catch((error) => {
                const resp = error.response;
                reject(resp);
            });
        });
    }
  }

  // mutations
  const mutations = {
    setVulnerabilityAssessment (state, vulnerabilityAssessment) {
      state.vulnerabilityAssessment = vulnerabilityAssessment
    },
    setVulnerabilityAssessments (state, vulnerabilityAssessments) {
        state.vulnerabilityAssessments = vulnerabilityAssessments
    },
    setVulnerabilityAssessmentsCount (state, count) {
      state.vulnerabilityAssessmentsCount = count;
    }
  }

  export default {
    state,
    getters,
    actions,
    mutations
  }
