<?php

namespace App\Http\Controllers;

use App\AssessmentEconomicSituation;
use App\AssessmentHousholdProfile;
use App\AssessmentImpairmentType;
use App\AssessmentIndependenceParticipation;
use App\AssessmentItemNeed;
use App\AssessmentNutrition;
use App\AssessmentProtection;
use App\AssessmentPsychosocial;
use App\AssessmentReferral;
use App\AssessmentVulnerabilityType;
use App\NeedCategory;
use App\Camp;
use App\Client;
use App\ClientNeed;
use App\District;
use App\VulnerabilityAssessment;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\Validator;

use App\Helpers\PaginateUtility;
use App\Helpers\AuthUtility;
use App\Helpers\ValidatorUtility;
use DB;

class VulnerabilityAssessmentController extends Controller {

    public function __construct() {
        $this->middleware('auth');
    }
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index() {
        //
        $assessments =  VulnerabilityAssessment::all();

        //Audit trail
        AuditRegister("VulnerabilityAssessmentController","View All Details","");
        return view('assessments.vulnerability.index',compact('assessments'));

    }
    public function AuthorizeAll()
    {
        //
        if (Auth::user()->hasPermission('authorize')){

            $assessments=VulnerabilityAssessment::where('auth_status', '=', 'pending')
                ->update([
                    'auth_status' => 'authorized',
                    'auth_by' => Auth::user()->username,
                    'auth_date' => date('Y-m-d H:i')
                ]);

            //Audit trail
            AuditRegister("VulnerabilityAssessmentController","AuthorizeAllAssessments",$assessments);

        }else{
            return null;
        }

    }
    public function AuthorizeAssessmentById($id)
    {
        //
        if (Auth::user()->hasPermission('authorize')){

            $assessments=VulnerabilityAssessment::find($id)
                ->update([
                    'auth_status' => 'authorized',
                    'auth_by' => Auth::user()->username,
                    'auth_date' => date('Y-m-d H:i')
                ]);
            //Audit trail
            AuditRegister("VulnerabilityAssessmentController","AuthorizeAssessmentById",$assessments);
        }else{
            return null;
        }
    }
    public function getPSNProfile($id)
    {
        $client=Client::findorfail($id);
        return view('assessments.vulnerability.profile',compact('client'));

    }
    public function inclusion()
    {
        //

        $assessments =  VulnerabilityAssessment::all();
        return view('assessments.vulnerability.inclusion',compact('assessments'));

    }
    public function showClients()
    {
        return view('assessments.vulnerability.listclients');
    }

    private function processSortRequest(Request $request, $assessments) {
        if ($request->sortField == 'camp') {
            $assessments = $assessments
                 ->join('camps', 'camps.id', '=', 'clients.camp_id')
                 ->orderBy('camps.camp_name', $request->sortType);
        } else {
            $assessments = $assessments->orderBy($request->sortField, $request->sortType);
        }
        return $assessments;
     }

    public function assessmentListJsonType(Request $request) {
        //
        try {
            $validator = Validator::make($request->all(), [
                'sortField' => 'required',
                'sortType' => 'required|max:5',
                'perPage' => 'required',
                'page' => 'required'
            ]);

            if ($validator->fails()) {
                return response()->json([
                    'success' => false,
                    'errors' => ValidatorUtility::processValidatorErrorMessages($validator),
                ], 422); // 400 being the HTTP code for an invalid request.
            } else {
                $dataType = config('database.default') == 'pgsql' ? 'INTEGER' : 'UNSIGNED';
                $assessments = VulnerabilityAssessment::join('clients', 'clients.id', '=', 'vulnerability_assessments.client_id')
                                    ->join('camps', 'camps.id', '=', 'clients.camp_id')
                                    ->leftJoin('districts', 'districts.id', '=', DB::raw('CAST(vulnerability_assessments.q1_4 AS ' .$dataType . ')' ))
                                    ->select(
                                        'vulnerability_assessments.id AS assessment_id',
                                        'vulnerability_assessments.q1_1 AS assessorName',
                                        'vulnerability_assessments.q1_2 AS idCode',
                                        'vulnerability_assessments.q1_4 AS district_id',
                                        'vulnerability_assessments.q1_5 AS dateOfInterview',
                                        'vulnerability_assessments.auth_status',
                                        'districts.district_name',
                                        'clients.*',
                                        'camps.camp_name');


                $assessments = $this->processSortRequest($request,  $assessments)->paginate($request->perPage);
                return response()->json([
                    'authRole' => AuthUtility::getRoleName(),
                    'vulnerabilityAssessments' => $assessments,
                    'pagination' =>  PaginateUtility::mapPagination($assessments),
                ]);
            }
        } catch (\Exception $ex) {
            return response()->json(array(
                'success' => false,
                'errors' => $ex->getMessage()
            ), 400); // 400 being the HTTP code for an invalid request.
        }







        $iTotalRecords =count(VulnerabilityAssessment::all());
        $sEcho = intval(10);

        $records = array();
        $records["data"] = array();


        $count=1;
        foreach($assessments as $assessment) {

                    $camp = "";
                    $district = "";
                    if (is_object(Camp::find($assessment->q1_3))) {
                        $camp = Camp::find($assessment->q1_3)->camp_name;
                    }
                    if (is_object(District::find($assessment->q1_4))) {
                        $district = District::find($assessment->q1_4)->district_name;
                    }
                    if (is_object($assessment->client)){
                        $camp_name =$assessment->client->camp->camp_name;
                        $hai_reg_number=$assessment->client->hai_reg_number;
                        $client_number= $assessment->client->client_number;
                        $individual_id=$assessment->client->individual_id;
                        $full_name=$assessment->client->full_name;
                        $sex=$assessment->client->sex;
                        $age=$assessment->client->age;
                    }
                if ($assessment->auth_status == "pending") {
                    if (Auth::user()->can('authorize')) {
                        $records["data"][] = array(
                            $count++,
                            $assessment->q1_5,
                            $camp,
                            $district,
                            $assessment->q1_1,
                            $hai_reg_number,
                            $client_number,
                            $individual_id,
                            $full_name,
                            $sex,
                            $age,
                            $assessment->auth_status,
                            '<ul class="icons-list text-center">
                            <li class="dropdown">
                                <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                                    <i class="icon-menu9"></i>
                                </a>
                                 <ul class="dropdown-menu dropdown-menu-right">
                                 <li id="' . $assessment->id . '"><a href="#" class="showRecord label "><i class="fa fa-eye "></i> View </a></li>
                                 <li id="' . $assessment->id . '"><a href="#" class="showRecord label " onclick="printPage(\'' . url('assessments/vulnerability') . '/' . $assessment->id . '\');" ><i class="fa fa-print "></i> Print </a></li>
                                 <li id="' . $assessment->id . '"><a href="' . url('vulnerability-assessment/download') . '/' . $assessment->id . '" class=" label "><i class="fa  fa-download"></i> Download </a></li>
                                 <li id="' . $assessment->id . '"><a href="#" class="authorizeRecord label "><i class="fa fa-check "></i> Authorize </a></li>
                                 <li id="' . $assessment->id . '"><a href="#" class="editRecord label "><i class="fa fa-pencil "></i> Edit </a></li>
                                 <li id="' . $assessment->id . '"><a href="#" class="deleteRecord label"><i class="fa fa-trash text-danger "></i> Delete </a></li>
                                </ul>
                            </li>
                        </ul>'
                        );
                    }
                    elseif (Auth::user()->hasRole('inputer'))
                    {
                        $records["data"][] = array(
                            $count++,
                            $assessment->q1_5,
                            $camp,
                            $district,
                            $assessment->q1_1,
                            $hai_reg_number,
                            $client_number,
                            $individual_id,
                            $full_name,
                            $sex,
                            $age,
                            $assessment->auth_status,
                            '<ul class="icons-list text-center">
                            <li class="dropdown">
                                <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                                    <i class="icon-menu9"></i>
                                </a>
                                 <ul class="dropdown-menu dropdown-menu-right">
                                 <li id="' . $assessment->id . '"><a href="#" class="showRecord label "><i class="fa fa-eye "></i> View </a></li>
                                 <li id="' . $assessment->id . '"><a href="#" class="showRecord label " onclick="printPage(\'' . url('assessments/vulnerability') . '/' . $assessment->id . '\');" ><i class="fa fa-print "></i> Print </a></li>
                                 <li id="' . $assessment->id . '"><a href="' . url('vulnerability-assessment/download') . '/' . $assessment->id . '" class=" label "><i class="fa  fa-download"></i> Download </a></li>
                                 <li id="' . $assessment->id . '"><a href="#" class="editRecord label "><i class="fa fa-pencil "></i> Edit </a></li>
                                 <li id="' . $assessment->id . '"><a href="#" class="deleteRecord label"><i class="fa fa-trash text-danger "></i> Delete </a></li>
                                </ul>
                            </li>
                        </ul>'
                        );
                    }
                }
                else
                {
                    if (Auth::user()->hasRole('admin'))
                    {
                        $records["data"][] = array(
                            $count++,
                            $assessment->q1_5,
                            $camp,
                            $district,
                            $assessment->q1_1,
                            $hai_reg_number,
                            $client_number,
                            $individual_id,
                            $full_name,
                            $sex,
                            $age,
                            $assessment->auth_status,
                            '<ul class="icons-list text-center">
                            <li class="dropdown">
                                <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                                    <i class="icon-menu9"></i>
                                </a>
                                 <ul class="dropdown-menu dropdown-menu-right">
                                 <li id="' . $assessment->id . '"><a href="#" class="showRecord label "><i class="fa fa-eye "></i> View </a></li>
                                 <li id="' . $assessment->id . '"><a href="#" class="showRecord label " onclick="printPage(\'' . url('assessments/vulnerability') . '/' . $assessment->id . '\');" ><i class="fa fa-print "></i> Print </a></li>
                                 <li id="' . $assessment->id . '"><a href="' . url('vulnerability-assessment/download') . '/' . $assessment->id . '" class=" label "><i class="fa  fa-download"></i> Download </a></li>
                                 <li id="' . $assessment->id . '"><a href="#" class="editRecord label "><i class="fa fa-pencil "></i> Edit </a></li>
                                 <li id="' . $assessment->id . '"><a href="#" class="deleteRecord label"><i class="fa fa-trash text-danger "></i> Delete </a></li>
                                </ul>
                            </li>
                        </ul>'
                        );
                    }
                    else
                    {
                        $records["data"][] = array(
                            $count++,
                            $assessment->q1_5,
                            $camp,
                            $district,
                            $assessment->q1_1,
                            $hai_reg_number,
                            $client_number,
                            $individual_id,
                            $full_name,
                            $sex,
                            $age,
                            $assessment->auth_status,
                            '<ul class="icons-list text-center">
                            <li class="dropdown">
                                <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                                    <i class="icon-menu9"></i>
                                </a>
                                 <ul class="dropdown-menu dropdown-menu-right">
                                 <li id="' . $assessment->id . '"><a href="#" class="showRecord label "><i class="fa fa-eye "></i> View </a></li>
                                 <li id="' . $assessment->id . '"><a href="#" class="showRecord label " onclick="printPage(\'' . url('assessments/vulnerability') . '/' . $assessment->id . '\');" ><i class="fa fa-print "></i> Print </a></li>
                                 <li id="' . $assessment->id . '"><a href="' . url('vulnerability-assessment/download') . '/' . $assessment->id . '" class=" label "><i class="fa  fa-download"></i> Download </a></li>
                                </ul>
                            </li>
                        </ul>'
                        );
                    }

                }
        }


        $records["draw"] = $sEcho;
        $records["recordsTotal"] = $iTotalRecords;
        $records["recordsFiltered"] = $iTotalRecords;

        echo json_encode($records);
    }
    public function showClientVulnerability($id)
    {
        //
        $client =Client::find($id);

        if(is_object($client->vulAssessment) && count($client->vulAssessment) >0)
        {
            return $this->edit($client->vulAssessment->id);
        }
        else
        {
            return view('assessments.vulnerability.create',compact('client'));
        }
    }

    public function downloadForm($id) {
        //
        $assessment = VulnerabilityAssessment::find($id);
        $fo = 'This form is applicable for identification of functional needs of PWDs/PSNs according to the components <br/>of the Global CBR matrix ( Health , Education ,  Livelihood , social and Empowerment ).';
        $pdf = \PDF::loadView('assessments.vulnerability.show', compact('assessment'))
            ->setOption('footer-center', '[page]')
            ->setOption('page-offset', 0)
            ->setOption('disable-smart-shrinking',true)->setOption('zoom','0.78');
        return $pdf->download('Vulnerability_Assessment.pdf');
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create() {

        $items_needs_category = NeedCategory::where('category_name','=','Needs of Items')->get()->first();
        $referral_needs_category = NeedCategory::where('category_name','=','Referral')->get()->first();
        $camps = Camp::all();
        //
        return view('assessments.vulnerability.create', compact(
            'items_needs_category',
            'referral_needs_category',
            'camps'
        ));

    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //
        try {
            $validator = Validator::make($request->all(), [
                'client_id' => 'required',
                'q1_1' => 'required',
                'q1_2' => 'required',
                'q1_3' => 'required',
                'q1_4' => 'required',
            ]);
            if ($validator->fails()) {
                return Response::json(array(
                    'success' => false,
                    'errors' => $validator->getMessageBag()->toArray()
                ), 400); // 400 being the HTTP code for an invalid request.
            } else {
                $assessment = new VulnerabilityAssessment;
                $assessment->client_id = $request->client_id;
                $assessment->q1_1 = $request->q1_1;
                $assessment->q1_2 = $request->q1_2;
                $assessment->q1_3 = $request->q1_3;
                $assessment->q1_4 = $request->q1_4;
                $assessment->q1_5 = date("Y-m-d", strtotime($request->q1_5));
                $assessment->comments = $request->comments;
                $assessment->created_by=Auth::user()->username;
                $assessment->save();

                $profile = new AssessmentHousholdProfile;
                $profile->assessment_id = $assessment->id;
                $profile->q2_1 = $request->q2_1;
                $profile->q2_2 = $request->q2_2;
                $profile->q2_3 = $request->q2_3;
                $profile->q2_4 = $request->q2_4;
                $profile->q2_5 = $request->q2_5;
                $profile->q2_6 = $request->q2_6;
                $profile->q2_7 = $request->q2_7;
                $profile->q2_8 = $request->q2_8;
                $profile->q2_9 = $request->q2_9;
                $profile->q2_10 = $request->q2_10;
                $profile->q2_11 = $request->q2_11;
                $profile->q2_12 = $request->q2_12;
                $profile->q2_13 = $request->q2_13;
                $profile->q2_14 = $request->q2_14;
                $profile->save();

                $economic = new AssessmentEconomicSituation;
                $economic->assessment_id = $assessment->id;
                $economic->q3_1 = $request->q3_1;
                $economic->q3_2 = $request->q3_2;
                $economic->q3_3 = $request->q3_3;
                $economic->q3_4 = $request->q3_4;
                $economic->q3_5 = $request->q3_5;
                $economic->q3_6 = $request->q3_6;
                $economic->q3_7 = $request->q3_7;
                $economic->q3_8 = $request->q3_8;
                $economic->save();

                $vulnerability = new AssessmentVulnerabilityType;
                $vulnerability->assessment_id = $assessment->id;
                $vulnerability->q4_1 = $request->q4_1;
                $vulnerability->q4_2 = $request->q4_2;
                $vulnerability->q4_3 = $request->q4_3;
                $vulnerability->q4_4 = $request->q4_4;
                $vulnerability->q4_5 = $request->q4_5;
                $vulnerability->q4_6 = $request->q4_6;
                $vulnerability->q4_7 = $request->q4_7;
                $vulnerability->save();

                $impairment = new AssessmentImpairmentType;
                $impairment->assessment_id = $assessment->id;
                $impairment->q5_1 = $request->q5_1;
                $impairment->q5_2 = $request->q5_2;
                $impairment->q5_3 = $request->q5_3;
                $impairment->q5_4 = $request->q5_4;
                $impairment->q5_5 = $request->q5_5;
                $impairment->q5_6 = $request->q5_6;
                $impairment->q5_7 = $request->q5_7;
                $impairment->q5_8 = $request->q5_8;
                $impairment->q5_9 = $request->q5_9;
                $impairment->q5_10 = $request->q5_10;
                $impairment->save();

                $nutrition = new AssessmentNutrition;
                $nutrition->assessment_id = $assessment->id;
                $nutrition->q6_1 = $request->q6_1;
                $nutrition->q6_2 = $request->q6_2;
                $nutrition->q6_3 = $request->q6_3;
                $nutrition->save();

                $participation = new AssessmentIndependenceParticipation;
                $participation->assessment_id = $assessment->id;
                $participation->q7_1 = $request->q7_1;
                $participation->q7_2 = $request->q7_2;
                $participation->q7_3 = $request->q7_3;
                $participation->q7_4 = $request->q7_4;
                $participation->q7_5 = $request->q7_5;
                $participation->q7_6 = $request->q7_6;
                $participation->q7_7 = $request->q7_7;
                $participation->q7_8 = $request->q7_8;
                $participation->save();

                $psychosocial = new AssessmentPsychosocial;
                $psychosocial->assessment_id = $assessment->id;
                $psychosocial->q8_1 = $request->q8_1;
                $psychosocial->q8_2 = $request->q8_2;
                $psychosocial->q8_3 = $request->q8_3;
                $psychosocial->q8_4 = $request->q8_4;
                $psychosocial->q8_5 = $request->q8_5;
                $psychosocial->q8_6 = $request->q8_6;
                $psychosocial->q8_7 = $request->q8_7;
                $psychosocial->q8_8 = $request->q8_8;
                $psychosocial->save();

                $protection = new AssessmentProtection;
                $protection->assessment_id = $assessment->id;
                $protection->q9_1 = $request->q9_1;
                $protection->q9_2 = $request->q9_2;
                $protection->q9_3 = $request->q9_3;
                $protection->q9_4 = $request->q9_4;
                $protection->q9_5 = $request->q9_5;
                $protection->q9_6 = $request->q9_6;
                $protection->q9_7 = $request->q9_7;
                $protection->q9_8 = $request->q9_8;
                $protection->save();

                $need_count=0;
                foreach ($request->need_id as $need_id){

                    $cl_need = new ClientNeed;
                    $cl_need->need_id = $need_id;
                    $cl_need->status = $request->status[$need_count];
                    $cl_need->location = $request->location[$need_count];
                    $cl_need->assessment_id = $assessment->id;
                    $cl_need->client_id=$assessment->client_id;
                    $cl_need->save();
                    $need_count++;
                }

                //Audit trail
                AuditRegister("VulnerabilityAssessmentController","Created new details ",$assessment);
                return response()->json([
                    'success' => true,
                    'message' => " Record saved"
                ], 200);
            }
        }
        catch (\Exception $ex)
        {
            return Response::json(array(
                'success' => false,
                'errors' => 1,
                'message' => $ex->getMessage()
            ), 400); // 400 being the HTTP code for an invalid request.
        }

    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
        $assessment = VulnerabilityAssessment::find($id);

        return view('assessments.vulnerability.show',compact('assessment'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
        $assessment=VulnerabilityAssessment::find($id);
        return view('assessments.vulnerability.edit',compact('assessment'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function clearAssessment($assessment)
    {
        if(is_object($assessment->householdProfile) && $assessment->householdProfile != null)
        {
            $assessment->householdProfile->delete();
        }
        if(is_object($assessment->economicSituation) && $assessment->economicSituation != null)
        {
            $assessment->economicSituation->delete();
        }
        if(is_object($assessment->vulnerabilityType) && $assessment->vulnerabilityType != null)
        {
            $assessment->vulnerabilityType->delete();
        }
        if(is_object($assessment->impairmentType) && $assessment->impairmentType != null)
        {
            $assessment->impairmentType->delete();
        }
        if(is_object($assessment->nutrition) && $assessment->nutrition != null)
        {
            $assessment->nutrition->delete();
        }
        if(is_object($assessment->independenceParticipation) && $assessment->independenceParticipation != null)
        {
            $assessment->independenceParticipation->delete();
        }
        if(is_object($assessment->psychosocial) && $assessment->psychosocial != null)
        {
            $assessment->psychosocial->delete();
        }
        if(is_object($assessment->protection) && $assessment->protection != null)
        {
            $assessment->protection->delete();
        }
        if(is_object($assessment->itemsNeeds) && $assessment->itemsNeeds != null)
        {
            $assessment->itemsNeeds->delete();
        }
        if(is_object($assessment->needs) && $assessment->needs != null)
        {
            foreach ($assessment->needs as $need){
                $need->delete();
            }
        }
    }
    public function update(Request $request, $id)
    {
        //
        try {
            $validator = Validator::make($request->all(), [
                'q1_1' => 'required',
                'q1_2' => 'required',
                'q1_3' => 'required',
                'q1_4' => 'required',
            ]);
            if ($validator->fails()) {
                return Response::json(array(
                    'success' => false,
                    'errors' => $validator->getMessageBag()->toArray()
                ), 400); // 400 being the HTTP code for an invalid request.
            } else {
                $assessment =  VulnerabilityAssessment::find($id);
                $assessment->q1_1 = $request->q1_1;
                $assessment->q1_2 = $request->q1_2;
                $assessment->q1_3 = $request->q1_3;
                $assessment->q1_4 = $request->q1_4;
                $assessment->q1_5 = date("Y-m-d", strtotime($request->q1_5));
                $assessment->comments = $request->comments;
                $assessment->save();

                $profile = $assessment->householdProfile;
                $profile->assessment_id = $assessment->id;
                $profile->q2_1 = $request->q2_1;
                $profile->q2_2 = $request->q2_2;
                $profile->q2_3 = $request->q2_3;
                $profile->q2_4 = $request->q2_4;
                $profile->q2_5 = $request->q2_5;
                $profile->q2_6 = $request->q2_6;
                $profile->q2_7 = $request->q2_7;
                $profile->q2_8 = $request->q2_8;
                $profile->q2_9 = $request->q2_9;
                $profile->q2_10 = $request->q2_10;
                $profile->q2_11 = $request->q2_11;
                $profile->q2_12 = $request->q2_12;
                $profile->q2_13 = $request->q2_13;
                $profile->q2_14 = $request->q2_14;
                $profile->save();

                $economic = $assessment->economicSituation;
                $economic->assessment_id = $assessment->id;
                $economic->q3_1 = $request->q3_1;
                $economic->q3_2 = $request->q3_2;
                $economic->q3_3 = $request->q3_3;
                $economic->q3_4 = $request->q3_4;
                $economic->q3_5 = $request->q3_5;
                $economic->q3_6 = $request->q3_6;
                $economic->q3_7 = $request->q3_7;
                $economic->q3_8 = $request->q3_8;
                $economic->save();

                $vulnerability = $assessment->vulnerabilityType;
                $vulnerability->assessment_id = $assessment->id;
                $vulnerability->q4_1 = $request->q4_1;
                $vulnerability->q4_2 = $request->q4_2;
                $vulnerability->q4_3 = $request->q4_3;
                $vulnerability->q4_4 = $request->q4_4;
                $vulnerability->q4_5 = $request->q4_5;
                $vulnerability->q4_6 = $request->q4_6;
                $vulnerability->q4_7 = $request->q4_7;
                $vulnerability->save();

                $impairment = $assessment->impairmentType;
                $impairment->assessment_id = $assessment->id;
                $impairment->q5_1 = $request->q5_1;
                $impairment->q5_2 = $request->q5_2;
                $impairment->q5_3 = $request->q5_3;
                $impairment->q5_4 = $request->q5_4;
                $impairment->q5_5 = $request->q5_5;
                $impairment->q5_6 = $request->q5_6;
                $impairment->q5_7 = $request->q5_7;
                $impairment->q5_8 = $request->q5_8;
                $impairment->q5_9 = $request->q5_9;
                $impairment->q5_10 = $request->q5_10;
                $impairment->save();

                $nutrition = $assessment->nutrition;
                $nutrition->assessment_id = $assessment->id;
                $nutrition->q6_1 = $request->q6_1;
                $nutrition->q6_2 = $request->q6_2;
                $nutrition->q6_3 = $request->q6_3;
                $nutrition->save();

                $participation = $assessment->independenceParticipation;
                $participation->assessment_id = $assessment->id;
                $participation->q7_1 = $request->q7_1;
                $participation->q7_2 = $request->q7_2;
                $participation->q7_3 = $request->q7_3;
                $participation->q7_4 = $request->q7_4;
                $participation->q7_5 = $request->q7_5;
                $participation->q7_6 = $request->q7_6;
                $participation->q7_7 = $request->q7_7;
                $participation->q7_8 = $request->q7_8;
                $participation->save();

                $psychosocial = $assessment->psychosocial;
                $psychosocial->assessment_id = $assessment->id;
                $psychosocial->q8_1 = $request->q8_1;
                $psychosocial->q8_2 = $request->q8_2;
                $psychosocial->q8_3 = $request->q8_3;
                $psychosocial->q8_4 = $request->q8_4;
                $psychosocial->q8_5 = $request->q8_5;
                $psychosocial->q8_6 = $request->q8_6;
                $psychosocial->q8_7 = $request->q8_7;
                $psychosocial->q8_8 = $request->q8_8;
                $psychosocial->save();

                $protection = $assessment->protection;
                $protection->assessment_id = $assessment->id;
                $protection->q9_1 = $request->q9_1;
                $protection->q9_2 = $request->q9_2;
                $protection->q9_3 = $request->q9_3;
                $protection->q9_4 = $request->q9_4;
                $protection->q9_5 = $request->q9_5;
                $protection->q9_6 = $request->q9_6;
                $protection->q9_7 = $request->q9_7;
                $protection->q9_8 = $request->q9_8;
                $protection->save();

                $need_count = 0;
                foreach ($request->need_id as $need_id) {
                    $clientNeed= ClientNeed::find($need_id);
                    if ($clientNeed != null) {
                        $clientNeed->status = $request->status[$need_count];
                        $clientNeed->location = $request->location[$need_count];
                        $clientNeed->assessment_id = $assessment->id;
                        $clientNeed->client_id = $assessment->client_id;
                        $clientNeed->save();
                        $need_count++;
                    }
                }
                //Audit trail
                AuditRegister("VulnerabilityAssessmentController","Updated details ",$assessment);
                return response()->json([
                    'success' => true,
                    'message' => " Record saved"
                ], 200);
            }
        }
        catch (\Exception $ex)
        {
            return Response::json(array(
                'success' => false,
                'errors' => 1,
                'message' => $ex->getMessage()
            ), 400); // 400 being the HTTP code for an invalid request.
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
        $assessment=VulnerabilityAssessment::find($id)->delete();
        //Audit trail
        AuditRegister("VulnerabilityAssessmentController","Delete details ",$assessment);
    }
}
